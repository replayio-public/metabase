name: E2E Tests (aggregate)

env:
  REPLAY_API_KEY: rwk_7frgQcd87zppwAc0kq16rIG1rDG2ymaT9paTpQP3z5F
# RECORD_REPLAY_CHROMIUM_DOWNLOAD_FILE: linux-chromium-20230704-9d0c94da8309-0dd39349954f.tar.xz
# RECORD_REPLAY_DISABLE_FEATURES: "[\"record-replay\"]"
# RECORD_REPLAY_DRIVER: /tmp/not-here

on:
  # We'll record runs using Replay.io and their browser on a schedule as an experiment
  schedule:
    - cron: "0 0 * * *"
  push:
  workflow_dispatch:
    inputs:
      chromium-build-id:
        description: "Chromium Build ID to download and use. Defaults to latest release"
        type: string
      folders:
        description: "Folders to run"
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}

jobs:
  e2e-matrix-builder:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.e2e-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Generate matrix for E2E tests
        id: e2e-matrix
        uses: ./.github/actions/build-e2e-matrix

  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    strategy:
      matrix:
        edition: [ee]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 9b1a5c2d5899f1abe1ac70b799fca98edfdd8a0a
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: e2e-tests

      - name: Cache uberjar
        id: cache-uberjar
        uses: actions/cache@v3
        with:
          path: ./target/uberjar/metabase.jar
          key: ${{ github.workflow }}-uberjar

      - name: Build uberjar with ./bin/build.sh
        if: steps.cache-uberjar.outputs.cache-hit != 'true'
        run: ./bin/build.sh

      - name: Prepare uberjar artifact
        uses: ./.github/actions/prepare-uberjar-artifact
        with:
          name: metabase-${{ matrix.edition }}-${{ github.event.pull_request.head.sha || github.sha }}-uberjar

  e2e-tests:
    needs: [build]
    if: |
      always() &&
      needs.build.result == 'success'
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    name: e2e-tests-${{ matrix.folder }}${{ matrix.context }}-${{ matrix.edition }}
    env:
      MB_EDITION: ${{ matrix.edition }}
      DISPLAY: ""
      QA_DB_ENABLED: true
      # Any env starting with `CYPRESS_` will be available to all Cypress tests via `Cypress.env()`
      # Example: you can get `CYPRESS_FOO` with `Cypress.env("FOO")`
      CYPRESS_ALL_FEATURES_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}
      CYPRESS_NO_FEATURES_TOKEN: ${{ secrets.E2E_STARTER_TOKEN }}
      CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      CYPRESS_PULL_REQUEST_ID: ${{ github.event.pull_request.number || '' }}
      COMMIT_INFO_MESSAGE : ${{ github.event.pull_request.title || github.event.head_commit.message || github.even.head.sha }}
      MB_SNOWPLOW_AVAILABLE: true
      MB_SNOWPLOW_URL: "http://localhost:9090" # Snowplow micro
      TZ: US/Pacific # to make node match the instance tz
    strategy:
      fail-fast: false
      matrix:
        java-version: [11]
        edition: [ee]
        folder: ${{ fromJSON(inputs.folders || '["binning","collections","custom-column","downloads","embedding","joins","onboarding","organization","permissions","sharing","dashboard-filters"]') }}
    services:
      maildev:
        image: maildev/maildev:2.0.5
        ports:
          - "1080:1080"
          - "1025:1025"
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q
      openldap:
        image: osixia/openldap:1.5.0
        ports:
          - "389:389"
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q
      postgres-sample:
        image: metabase/qa-databases:postgres-sample-12
        ports:
          - "5404:5432"
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q
      mongo-sample:
        image: metabase/qa-databases:mongo-sample-4.4
        ports:
          - 27004:27017
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q
      mysql-sample:
        image: metabase/qa-databases:mysql-sample-8
        ports:
          - 3304:3306
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q

    steps:
      - name: Configure debug mode
        if: runner.debug == '1'
        run: |
          echo "DEBUG=cypress:launcher:browsers,replay:cypress:plugin:*,-replay:cypress:plugin:reporter:steps,-replay:cypress:plugin:task,replay:test-utils:reporter" >> "$GITHUB_ENV"
          echo "RECORD_REPLAY_VERBOSE=1" >> "$GITHUB_ENV"
      - uses: actions/checkout@v3
        with:
          # 1220-merge: we might not need this
          ref: 9b1a5c2d5899f1abe1ac70b799fca98edfdd8a0a
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Prepare JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"
      - name: Prepare Cypress environment
        uses: ./.github/actions/prepare-cypress
      - name: Run Snowplow micro
        uses: ./.github/actions/run-snowplow-micro

      - name: Prepare Docker containers
        uses: ./.github/actions/e2e-prepare-containers
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          maildev: true
          openldap: ${{ startsWith(matrix.name, 'admin') }}
          postgres: ${{ matrix.name != 'mongo'}}
          mysql: ${{ matrix.name != 'mongo'}}
          mongo: ${{ matrix.name == 'mongo'}}

      - name: Retrieve uberjar artifact for ${{ matrix.edition }}
        uses: actions/download-artifact@v3
        with:
          name: metabase-${{ matrix.edition }}-${{ github.event.pull_request.head.sha || github.sha }}-uberjar

      - name: Get the version info
        run: |
          jar xf target/uberjar/metabase.jar version.properties
          mv version.properties resources/

      # REPLAY.IO specific jobs
      - name: Optionally configure browser download
        if: inputs.chromium-build-id
        run: echo "RECORD_REPLAY_CHROMIUM_DOWNLOAD_FILE=${{ inputs.chromium-build-id }}.tar.xz" >> "$GITHUB_ENV"

      - name: Install Replay.io browser
        run: npx @replayio/cypress install

      - name: 1) Run EE Cypress tests on ${{ matrix.folder }}
        if: always()
        run: |
          yarn run test-cypress-run \
          --env grepTags="-@OSS" \
          --folder ${{ matrix.folder }}
        env:
          TERM: xterm
          CYPRESS_REPLAYIO_ENABLED: 1

      - name: 2) Run EE Cypress tests on ${{ matrix.folder }} with Video
        if: always()
        run: |
          yarn run test-cypress-run \
          --env grepTags="-@OSS" \
          --folder ${{ matrix.folder }}
        env:
          TERM: xterm
          CYPRESS_VIDEO_ENABLED: 1

      - name: 3.2) Run EE Cypress tests on ${{ matrix.folder }} using Replay.io browser (no-asserts + no-maps)
        if: always()
        run: |
          yarn run test-cypress-run \
          --env grepTags="-@OSS" \
          --folder ${{ matrix.folder }} \
          --browser "replay-chromium"
        env:
          TERM: xterm
          CYPRESS_REPLAYIO_ENABLED: 1
          RECORD_REPLAY_DISABLE_ASSERTS: 1
          RECORD_REPLAY_DISABLE_SOURCEMAP_COLLECTION: 1
          RECORD_REPLAY_METADATA_FILE: /tmp/replay-metadata.json
          RECORD_REPLAY_METADATA_TEST_RUN_ID: ${{ github.run_id }}

      - name: Upload Replay.io recordings
        uses: replayio/action-upload@v0.5.0
        if: always()
        with:
          api-key: rwk_7frgQcd87zppwAc0kq16rIG1rDG2ymaT9paTpQP3z5F
          public: true
